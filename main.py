import asyncio
import os
import uuid
from datetime import datetime, timedelta
from enum import Enum
from typing import List

import asyncpg
import pytz
import uvicorn
from aiogram import Bot, Dispatcher, types
from aiogram.filters import Command
from aiogram.filters.command import Command
from aiogram.fsm.context import FSMContext
from aiogram.fsm.state import State, StatesGroup
from aiogram.types import (
    BufferedInputFile,
    InlineKeyboardButton,
    InlineKeyboardMarkup,
    InputFile,
)
from bson import ObjectId
from fastapi import Depends, FastAPI, Header, HTTPException, Request
from motor.motor_asyncio import AsyncIOMotorClient
from pydantic import BaseModel
from web3 import AsyncHTTPProvider, AsyncWeb3, Web3


# –ù–∞—Å—Ç—Ä–æ–π–∫–∏ –±–æ—Ç–∞
API_TOKEN = os.getenv("API_TOKEN")
MONGO_URL = os.getenv("MONGO_URL")
DB_NAME = os.getenv("DB_NAME")
PG_DATABASE_URL = f'postgresql://{os.getenv("POSTGRES_USER")}:{os.getenv("POSTGRES_PASSWORD")}@postgres:5432/{os.getenv("POSTGRES_DB")}'

# –ö–æ–Ω—Å—Ç–∞–Ω—Ç–∞ –¥–ª—è –∫–ª—é—á–∞ –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏
AUTH_KEY = os.getenv("AUTH_KEY")

# –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è FastAPI
app = FastAPI()

# –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –±–æ—Ç–∞ –∏ –¥–∏—Å–ø–µ—Ç—á–µ—Ä–∞
bot = Bot(token=API_TOKEN)

# –ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ MongoDB
client = AsyncIOMotorClient(MONGO_URL)
db = client[DB_NAME]


class AccountData(BaseModel):
    order_id: str
    user_id: str
    w_seed: str
    w_email_login: str
    w_email_pass: str


class ReadyAccount(BaseModel):
    seed: str
    email_login: str
    email_pass: str


def verify_auth_key(x_auth_key: str = Header(...)):
    if x_auth_key != AUTH_KEY:
        raise HTTPException(status_code=403, detail="–ù–µ–≤–µ—Ä–Ω—ã–π –∫–ª—é—á –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏")
    return x_auth_key


@app.post("/add_ready_accounts")
async def add_ready_accounts(
    request: Request, auth_key: str = Depends(verify_auth_key)
):
    accounts_data = await request.body()
    accounts_data = accounts_data.decode()

    accounts = []
    for line in accounts_data.strip().split("\n"):
        parts = line.split(":")
        if len(parts) != 3:
            raise HTTPException(
                status_code=400, detail=f"–ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç —Å—Ç—Ä–æ–∫–∏: {line}"
            )
        accounts.append(
            {"seed": parts[0], "email_login": parts[1], "email_pass": parts[2]}
        )

    async with asyncpg.create_pool(PG_DATABASE_URL) as pool:
        async with pool.acquire() as connection:
            # –ü–æ–ª—É—á–∞–µ–º –∑–∞–ø–∏—Å–∏ –∏–∑ queue_goods —Å–æ —Å—Ç–∞—Ç—É—Å–æ–º New
            new_queue_items = await connection.fetch(
                "SELECT * FROM queue_goods WHERE status = 'New'"
            )

            # –ì—Ä—É–ø–ø–∏—Ä—É–µ–º queue_goods –ø–æ order_id
            grouped_queue_items = {}
            for item in new_queue_items:
                if item["order_id"] not in grouped_queue_items:
                    grouped_queue_items[item["order_id"]] = []
                grouped_queue_items[item["order_id"]].append(item)

            processed_accounts = 0
            remaining_accounts = accounts.copy()

            for order_id, queue_items in grouped_queue_items.items():
                order = await db.orders.find_one({"_id": ObjectId(order_id)})
                if not order:
                    continue

                new_registration_accounts = order["registration_accounts"]
                need_accounts = order["need_accounts"]
                tg_user_id = order["tg_user_id"]

                registered_accounts = 0
                order_accounts = []

                for queue_item in queue_items:
                    if not remaining_accounts:
                        break

                    if new_registration_accounts >= need_accounts:
                        break

                    account = remaining_accounts.pop(0)
                    new_registration_accounts += 1
                    registered_accounts += 1

                    # –î–æ–±–∞–≤–ª—è–µ–º –Ω–æ–≤—É—é –∑–∞–ø–∏—Å—å –≤ Goods
                    new_goods = {
                        "create_date": datetime.now(pytz.utc),
                        "order_id": ObjectId(order_id),
                        "user_id": queue_item["user_id"],
                        "seed": account["seed"],
                        "email_login": account["email_login"],
                        "email_pass": account["email_pass"],
                    }
                    result = await db.goods.insert_one(new_goods)
                    new_goods_id = result.inserted_id

                    # –û–±–Ω–æ–≤–ª—è–µ–º –∑–∞–∫–∞–∑
                    await db.orders.update_one(
                        {"_id": ObjectId(order_id)},
                        {
                            "$set": {
                                "registration_accounts": new_registration_accounts
                            },
                            "$push": {"goods": new_goods_id},
                        },
                    )

                    # –û–±–Ω–æ–≤–ª—è–µ–º —Å—Ç–∞—Ç—É—Å –≤ queue_goods
                    await connection.execute(
                        "UPDATE queue_goods SET status = 'Done' WHERE id = $1",
                        queue_item["id"],
                    )

                    order_accounts.append(
                        f"{account['seed']}:{account['email_login']}:{account['email_pass']}"
                    )

                    processed_accounts += 1

                # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é
                if new_registration_accounts == need_accounts:
                    await db.orders.update_one(
                        {"_id": ObjectId(order_id)}, {"$set": {"status": "Done"}}
                    )

                    completion_message = (
                        f"‚úÖ–ó–∞–∫–∞–∑ ‚Ññ{order_id} –ø–æ–ª–Ω–æ—Å—Ç—å—é –≤—ã–ø–æ–ª–Ω–µ–Ω!‚úÖ\n\n"
                        f"üîã–ó–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω–æ –≤—Å–µ {new_registration_accounts}/{need_accounts} –∞–∫–∫–∞—É–Ω—Ç–æ–≤\n"
                    )
                    await bot.send_message(tg_user_id, completion_message)

                    order = await db.orders.find_one({"_id": ObjectId(order_id)})

                    goods_ids = order.get("goods", [])
                    goods_object_ids = [ObjectId(gid) for gid in goods_ids]

                    goods = await db.goods.find(
                        {"_id": {"$in": goods_object_ids}}
                    ).to_list(length=None)

                    goods_text = "\n".join(
                        [
                            f"{g['seed']}:{g['email_login']}:{g['email_pass']}"
                            for g in goods
                        ]
                    )

                    file = BufferedInputFile(
                        goods_text.encode(), filename=f"order_{order_id[:8]}_goods.txt"
                    )
                    await bot.send_document(tg_user_id, file)
                else:
                    remaining = need_accounts - new_registration_accounts
                    partial_completion_message = (
                        f"üéâ –ó–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–ª–∏ –≤–∞–º <b>{registered_accounts} –∞–∫–∫–∞—É–Ω—Ç–∞(-–æ–≤)</b> "
                        f"{new_registration_accounts}/{need_accounts} üéâ\n"
                        f"‚ö†Ô∏è–û–∂–∏–¥–∞–π—Ç–µ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—é –æ—Å—Ç–∞–≤—à–∏—Ö—Å—è {remaining} –∞–∫–∫–∞—É–Ω—Ç–∞(-–æ–≤).\n\n"
                        f"üìù –ó–∞–∫–∞–∑ ‚Ññ: {order_id}:\n\n"
                        f"üîë –î–∞–Ω–Ω—ã–µ –∞–∫–∫–∞—É–Ω—Ç–æ–≤:\n"
                        f"–ù–∞–∂–º–∏—Ç–µ –Ω–∞ –∫–æ–º–∞–Ω–¥—É —Å—Ç–∞—Ä—Ç –∏ –∫–ª–∏–∫–Ω–µ—Ç–µ –Ω–∞ –∫–Ω–æ–ø–∫—É –ø–æ–¥ —Å–æ–æ–±—â–µ–Ω–∏–µ–º —Å –Ω—É–∂–Ω—ã–º –∑–∞–∫–∞–∑–æ–º: /start"
                    )
                    await bot.send_message(
                        tg_user_id, partial_completion_message, parse_mode="HTML"
                    )

            # –ó–∞–ø–∏—Å—ã–≤–∞–µ–º –æ—Å—Ç–∞–≤—à–∏–µ—Å—è –∞–∫–∫–∞—É–Ω—Ç—ã –≤ ready_accounts
            for account in remaining_accounts:
                ready_account = {
                    "create_date": datetime.now(pytz.utc),
                    "update_date": datetime.now(pytz.utc),
                    "seed": account["seed"],
                    "email_login": account["email_login"],
                    "email_pass": account["email_pass"],
                    "status": "available",
                }
                await db.ready_accounts.insert_one(ready_account)

    return {
        "status": "success",
        "message": f"–û–±—Ä–∞–±–æ—Ç–∞–Ω–æ {processed_accounts} –∞–∫–∫–∞—É–Ω—Ç–æ–≤, {len(remaining_accounts)} –¥–æ–±–∞–≤–ª–µ–Ω–æ –≤ ready_accounts",
    }


@app.post("/add_account")
async def add_account(account_data: AccountData):
    # –ù–∞—Ö–æ–¥–∏–º –∑–∞–∫–∞–∑ –ø–æ order_id
    order = await db.orders.find_one({"_id": ObjectId(account_data.order_id)})
    if not order:
        raise HTTPException(status_code=404, detail="–ó–∞–∫–∞–∑ –Ω–µ –Ω–∞–π–¥–µ–Ω")
    tg_user_id = order["tg_user_id"]

    # –£–≤–µ–ª–∏—á–∏–≤–∞–µ–º registration_accounts –Ω–∞ 1
    new_registration_accounts = order["registration_accounts"] + 1

    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –Ω–µ –ø—Ä–µ–≤—ã—à–∞–µ—Ç –ª–∏ –Ω–æ–≤–æ–µ –∑–Ω–∞—á–µ–Ω–∏–µ need_accounts
    if new_registration_accounts > order["need_accounts"]:
        # –°–æ—Ö—Ä–∞–Ω—è–µ–º –∏–∑–±—ã—Ç–æ—á–Ω—ã–π –∞–∫–∫–∞—É–Ω—Ç –≤ ready_accounts
        ready_account = {
            "create_date": datetime.now(pytz.utc),
            "update_date": datetime.now(pytz.utc),
            "seed": account_data.w_seed,
            "email_login": account_data.w_email_login,
            "email_pass": account_data.w_email_pass,
            "status": "available",
        }
        await db.ready_accounts.insert_one(ready_account)
        return {
            "status": "success",
            "message": f"–õ–∏–º–∏—Ç —É –∑–∞–∫–∞–∑–∞ {account_data.order_id} –ø—Ä–µ–≤—ã—à–∞–Ω {new_registration_accounts}/{order['need_accounts']} –∑–∞–ø–∏—Å–∞–ª–∏ –≤ ready_account –±–∞–∑—É.",
        }

    # –î–æ–±–∞–≤–ª—è–µ–º –Ω–æ–≤—É—é –∑–∞–ø–∏—Å—å –≤ Goods
    new_goods = {
        "create_date": datetime.now(pytz.utc),
        "order_id": ObjectId(account_data.order_id),
        "user_id": account_data.user_id,
        "seed": account_data.w_seed,
        "email_login": account_data.w_email_login,
        "email_pass": account_data.w_email_pass,
    }
    result = await db.goods.insert_one(new_goods)
    new_goods_id = result.inserted_id

    # –û–±–Ω–æ–≤–ª—è–µ–º –∑–∞–∫–∞–∑
    await db.orders.update_one(
        {"_id": ObjectId(account_data.order_id)},
        {
            "$set": {"registration_accounts": new_registration_accounts},
            "$push": {"goods": new_goods_id},
        },
    )

    # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é –æ –Ω–æ–≤–æ–º –∞–∫–∫–∞—É–Ω—Ç–µ
    message = (
        f"üéâ –ù–æ–≤—ã–π –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω–Ω—ã–π –∞–∫–∫–∞—É–Ω—Ç {new_registration_accounts}/{order['need_accounts']} üéâ\n"
        f"üìù –ó–∞–∫–∞–∑ ‚Ññ: {account_data.order_id}:\n\n"
        f"üîë –î–∞–Ω–Ω—ã–µ –∞–∫–∫–∞—É–Ω—Ç–∞:\n"
        f"–ù–∞–∂–º–∏—Ç–µ –Ω–∞ –∫–æ–º–∞–Ω–¥—É —Å—Ç–∞—Ä—Ç –∏ –∫–ª–∏–∫–Ω–µ—Ç–µ –Ω–∞ –∫–Ω–æ–ø–∫—É –ø–æ–¥ —Å–æ–æ–±—â–µ–Ω–∏–µ–º —Å –Ω—É–∂–Ω—ã–º –∑–∞–∫–∞–∑–æ–º: /start"
        # f"<code>{account_data.w_seed}:{account_data.w_email_login}:{account_data.w_email_pass}</code>"
    )

    try:
        await bot.send_message(tg_user_id, message, parse_mode="HTML")
    except Exception as e:
        print(f"–ù–µ —É–¥–∞–ª–æ—Å—å –æ—Ç–ø—Ä–∞–≤–∏—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é {tg_user_id}: {e}")

    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –≤—ã–ø–æ–ª–Ω–µ–Ω –ª–∏ –∑–∞–∫–∞–∑ –ø–æ–ª–Ω–æ—Å—Ç—å—é
    if new_registration_accounts == order["need_accounts"]:
        await db.orders.update_one(
            {"_id": ObjectId(account_data.order_id)}, {"$set": {"status": "Done"}}
        )

        completion_message = (
            f"‚úÖ–ó–∞–∫–∞–∑ ‚Ññ{account_data.order_id} –ø–æ–ª–Ω–æ—Å—Ç—å—é –≤—ã–ø–æ–ª–Ω–µ–Ω!‚úÖ\n\n"
            f"üîã–ó–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω–æ –≤—Å–µ {new_registration_accounts}/{order['need_accounts']} –∞–∫–∫–∞—É–Ω—Ç–æ–≤\n"
        )
        await bot.send_message(tg_user_id, completion_message)

        order = await db.orders.find_one({"_id": ObjectId(account_data.order_id)})

        goods_ids = order.get("goods", [])
        goods_object_ids = [ObjectId(gid) for gid in goods_ids]

        goods = await db.goods.find({"_id": {"$in": goods_object_ids}}).to_list(
            length=None
        )

        goods_text = "\n".join(
            [f"{g['seed']}:{g['email_login']}:{g['email_pass']}" for g in goods]
        )

        file = BufferedInputFile(
            goods_text.encode(), filename=f"order_{account_data.order_id[:8]}_goods.txt"
        )
        await bot.send_document(tg_user_id, file)

    return {"status": "success", "message": "–ê–∫–∫–∞—É–Ω—Ç —É—Å–ø–µ—à–Ω–æ –¥–æ–±–∞–≤–ª–µ–Ω"}


# if __name__ == "__main__":
#     uvicorn.run(app, host="0.0.0.0", port=8000)
