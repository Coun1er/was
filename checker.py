import asyncio
import logging
import os
import uuid
from datetime import datetime, timedelta

import asyncpg
import pytz
from aiogram import Bot, Dispatcher
from aiogram.types import (
    BufferedInputFile,
)
from bson import ObjectId
from loguru import logger
from motor.motor_asyncio import AsyncIOMotorClient
from web3 import AsyncHTTPProvider, AsyncWeb3

from custom_message import CUSTOM_MESSAGES_IN_FILE

# –ù–∞—Å—Ç—Ä–æ–π–∫–∏ –±–æ—Ç–∞
BOT_TOKEN = os.getenv("BOT_TOKEN")
MONGO_URL = os.getenv("MONGO_URL")
DB_NAME = os.getenv("DB_NAME")
PG_DATABASE_URL = f'postgresql://{os.getenv("POSTGRES_USER")}:{os.getenv("POSTGRES_PASSWORD")}@postgres:5432/{os.getenv("POSTGRES_DB")}'

logging.basicConfig(level=logging.INFO)

# –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –±–æ—Ç–∞ –∏ –¥–∏—Å–ø–µ—Ç—á–µ—Ä–∞
bot = Bot(token=BOT_TOKEN)
dp = Dispatcher()

# –ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ MongoDB
client = AsyncIOMotorClient(MONGO_URL)
db = client[DB_NAME]


async def get_usdc_balance(w3: AsyncWeb3, abi: str, address: str) -> int:
    contract_address = w3.to_checksum_address(
        "0x833589fCD6eDb6E08f4c7C32D4f71b54bdA02913"
    )
    contract_instance = w3.eth.contract(address=contract_address, abi=abi)

    max_retries = 5
    delay = 1.0

    for attempt in range(max_retries):
        try:
            balance_wei = await contract_instance.functions.balanceOf(address).call()
            balance_human = balance_wei / 10**6
            logger.info(f"–ë–∞–ª–∞–Ω—Å —É –∫–æ—à–µ–ª—å–∫–∞ {address} | {balance_human}")
            return balance_human
        except Exception as e:
            if attempt == max_retries - 1:
                raise Exception(
                    f"–ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å –±–∞–ª–∞–Ω—Å USDC –ø–æ—Å–ª–µ {max_retries} –ø–æ–ø—ã—Ç–æ–∫: {str(e)}"
                )
            print(
                f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –±–∞–ª–∞–Ω—Å–∞ USDC (–ø–æ–ø—ã—Ç–∫–∞ {attempt + 1}/{max_retries}): {str(e)}"
            )
            await asyncio.sleep(delay)

    raise Exception(f"–ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å –±–∞–ª–∞–Ω—Å USDC –ø–æ—Å–ª–µ {max_retries} –ø–æ–ø—ã—Ç–æ–∫")


async def insert_queue_goods(order_id: str, user_id: int, num_accounts: int):
    async with asyncpg.create_pool(PG_DATABASE_URL) as pool:
        async with pool.acquire() as connection:
            values = [
                (
                    str(uuid.uuid4()),
                    datetime.now(pytz.utc),
                    str(order_id),
                    str(user_id),
                    "New",
                )
                for _ in range(num_accounts)
            ]
            await connection.executemany(
                """
                INSERT INTO queue_goods (uuid, create_date, update_date, order_id, user_id, status)
                VALUES ($1, $2, $2, $3, $4, $5)
            """,
                values,
            )
            logger.info("–î–æ–±–∞–≤–∏–ª–∏ –≤ –±–¥ –¥–ª—è —Ä–∞–±–æ—Ç—ã")


async def wait_for_payment(
    order_id: str, tg_user_id: int, total_price: float, end_time: datetime
):
    w3 = AsyncWeb3(
        AsyncHTTPProvider(
            "https://rpc.ankr.com/base/0fcbbecbee6b3e6cf1913685722910b744f4809c966b7f950ebec3ecb7fd29ef"
        )
    )
    current_dir = os.path.dirname(os.path.abspath(__file__))
    with open(os.path.join(current_dir, "data/erc_20_abi.json"), "r") as f:
        ERC_20 = f.read()

    logger.info(
        f"–ó–∞–∫–∞–∑ {order_id} –º—ã –≤–Ω—É—Ç—Ä–∏ —Ñ—É–Ω–∫—Ü–∏–∏ wait payment –≤—Ä–µ–º—è –æ–∫–æ–Ω—á–∞–Ω–∏—è {end_time} —Ç–µ–∫—É—â–∏–µ –≤—Ä–µ–º—è {datetime.now(pytz.utc)}"
    )
    while datetime.now(pytz.utc) < end_time:
        logger.info("–ó–∞—à–ª–∏ –≤–Ω—É—Ç—Ä—å —Ü–∏–∫–ª–∞ –±–µ—Å–∫–æ–Ω–µ—á–Ω–æ–≥–æ")
        order = await db.orders.find_one({"_id": ObjectId(order_id)})
        if not order:
            return  # –ó–∞–∫–∞–∑ –Ω–µ –Ω–∞–π–¥–µ–Ω, –≤—ã—Ö–æ–¥–∏–º –∏–∑ —Ñ—É–Ω–∫—Ü–∏–∏
        logger.info("–î–æ—à–ª–∏ –¥–æ –ø—Ä–æ–≤–µ—Ä–∫–∏ –±–∞–ª–∞–Ω—Å–∞")
        balance_in_usdc = await get_usdc_balance(
            w3=w3, abi=ERC_20, address=order["pay_address"]
        )
        logger.info(
            f"–ó–∞–∫–∞–∑ {order_id} –±–∞–ª–∞–Ω—Å –∫–æ—à–µ–ª—å–∫–∞ {balance_in_usdc} –∞ –Ω—É–∂–Ω–æ –¥–ª—è –æ–ø–ª–∞—Ç—ã {total_price}"
        )
        if balance_in_usdc >= total_price or order["status"] == "Worked":
            # –û–ø–ª–∞—Ç–∞ –ø–æ–ª—É—á–µ–Ω–∞
            await db.orders.update_one(
                {"_id": ObjectId(order_id)}, {"$set": {"status": "Worked"}}
            )

            # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –æ–± —É—Å–ø–µ—à–Ω–æ–π –æ–ø–ª–∞—Ç–µ
            await bot.send_message(
                tg_user_id,
                f"‚úÖ –û–ø–ª–∞—Ç–∞ —É—Å–ø–µ—à–Ω–æ –ø–æ–ª—É—á–µ–Ω–∞!\n"
                f"–í–∞—à –∑–∞–∫–∞–∑ <b>‚Ññ{order_id}</b> –Ω–∞ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—é <b>{order['need_accounts']}</b> –∞–∫–∫–∞—É–Ω—Ç–∞(-–æ–≤) –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω –≤ —Ä–∞–±–æ—Ç—É.\n\n"
                f"üìã <b>–ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –ø–æ –∑–∞–∫–∞–∑—É:</b>\n\n"
                f"- –ê–∫–∫–∞—É–Ω—Ç—ã –≤—Å–µ—Ö –∑–∞–∫–∞–∑–æ–≤ —Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä—É—é—Ç—Å—è –≤ —Ä–∞–Ω–¥–æ–º–Ω–æ–º –ø–æ—Ä—è–¥–∫–µ.\n"
                f"- –ü–æ –º–µ—Ä–µ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏ –º—ã –±—É–¥–µ–º –æ—Ç–ø—Ä–∞–≤–ª—è—Ç—å –≤–∞–º —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –∏ –æ–Ω–∏ —Å—Ä–∞–∑—É —Å—Ç–∞–Ω—É—Ç –¥–æ—Å—Ç—É–ø–Ω—ã –¥–ª—è —Å–∫–∞—á–∏–≤–∞–Ω–∏—è –≤ —Å–ø–∏—Å–∫–µ –∑–∞–∫–∞–∑–æ–≤ –ø–æ –∫–æ–º–∞–Ω–¥–µ /start –≤ —Ñ–æ—Ä–º–∞—Ç–µ: seed:email_login:email_pass.\n",
                parse_mode="HTML",
            )

            # –ü—Ä–æ–≤–µ—Ä—è–µ–º –¥–æ—Å—Ç—É–ø–Ω—ã–µ –∞–∫–∫–∞—É–Ω—Ç—ã –≤ ready_accounts
            available_accounts = await db.ready_accounts.find(
                {"status": "available"}
            ).to_list(length=order["need_accounts"])
            registered_accounts = min(len(available_accounts), order["need_accounts"])

            logger.info(f"–∑–∞—Ä–µ–≥–∞–Ω–Ω—ã–µ –∞–∫–∫–∞—É–Ω—Ç—ã {registered_accounts}")
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º —á—Ç–æ –Ω–µ—Ç—É –≥–æ—Ç–æ–≤—ã—Ö –∞–∫–∫–∞—É–Ω—Ç–æ–≤
            if registered_accounts == 0:
                logger.info("–ó–∞—à–ª–∏ –≤ –¥–æ–±–∞–≤–ª–µ–Ω–∏–µ")
                # –ï—Å–ª–∏ –Ω–µ—Ç –¥–æ—Å—Ç—É–ø–Ω—ã—Ö –∞–∫–∫–∞—É–Ω—Ç–æ–≤, –¥–æ–±–∞–≤–ª—è–µ–º –≤—Å–µ –∞–∫–∫–∞—É–Ω—Ç—ã –∑–∞–∫–∞–∑–∞ –≤ PostgreSQL
                await insert_queue_goods(
                    order_id, order["user_id"], order["need_accounts"]
                )
                return

            for account in available_accounts[:registered_accounts]:
                new_goods = {
                    "create_date": datetime.now(pytz.utc),
                    "order_id": ObjectId(order_id),
                    "user_id": order["user_id"],
                    "seed": account["seed"],
                    "email_login": account["email_login"],
                    "email_pass": account["email_pass"],
                }
                result = await db.goods.insert_one(new_goods)
                new_goods_id = result.inserted_id

                # –û–±–Ω–æ–≤–ª—è–µ–º –∑–∞–∫–∞–∑
                await db.orders.update_one(
                    {"_id": ObjectId(order_id)},
                    {
                        "$inc": {"registration_accounts": 1},
                        "$push": {"goods": new_goods_id},
                    },
                )

                # –û–±–Ω–æ–≤–ª—è–µ–º —Å—Ç–∞—Ç—É—Å –∞–∫–∫–∞—É–Ω—Ç–∞ –≤ ready_accounts
                await db.ready_accounts.update_one(
                    {"_id": account["_id"]}, {"$set": {"status": "used"}}
                )

            # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –æ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω–Ω—ã—Ö –∞–∫–∫–∞—É–Ω—Ç–∞—Ö
            if registered_accounts > 0:
                if registered_accounts == order["need_accounts"]:
                    # –ï—Å–ª–∏ –≤—Å–µ –∞–∫–∫–∞—É–Ω—Ç—ã –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω—ã
                    completion_message = (
                        f"‚úÖ–ó–∞–∫–∞–∑ ‚Ññ{order_id} –ø–æ–ª–Ω–æ—Å—Ç—å—é –≤—ã–ø–æ–ª–Ω–µ–Ω!‚úÖ\n\n"
                        f"üîã–ó–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω–æ –≤—Å–µ {registered_accounts}/{order['need_accounts']} –∞–∫–∫–∞—É–Ω—Ç–æ–≤\n\n"
                        f"üîë –î–∞–Ω–Ω—ã–µ –∞–∫–∫–∞—É–Ω—Ç–∞:\n"
                        f"–í–≤–µ–¥–∏—Ç–µ –∫–æ–º–∞–Ω–¥—É —Å—Ç–∞—Ä—Ç –∏ –∫–ª–∏–∫–Ω–µ—Ç–µ –Ω–∞ –∫–Ω–æ–ø–∫—É –ø–æ–¥ —Å–æ–æ–±—â–µ–Ω–∏–µ–º —Å –Ω—É–∂–Ω—ã–º –∑–∞–∫–∞–∑–æ–º: /start"
                    )
                    await bot.send_message(
                        tg_user_id, completion_message, parse_mode="HTML"
                    )

                    order = await db.orders.find_one({"_id": ObjectId(order_id)})

                    # C—Ç–∞–≤–∏–º —Å—Ç–∞—Ç—É—Å –∑–∞–∫–∞–∑–∞ Done –µ—Å–ª–∏ –≤—Å–µ –∞–∫–∏ –∑–∞—Ä–µ–≥–∞–Ω—ã
                    await db.orders.update_one(
                        {"_id": ObjectId(order_id)}, {"$set": {"status": "Done"}}
                    )

                    goods_ids = order.get("goods", [])
                    goods_object_ids = [ObjectId(gid) for gid in goods_ids]
                    goods = await db.goods.find(
                        {"_id": {"$in": goods_object_ids}}
                    ).to_list(length=None)

                    goods_text = "\n".join(
                        [
                            f"{g['seed']}:{g['email_login']}:{g['email_pass']}"
                            for g in goods
                        ]
                    )

                    description_message = f"–ó–∞–∫–∞–∑: {str(order_id)}\n–§–æ—Ä–º–∞—Ç –≤—ã–¥–∞—á–∏: private_seed:email_login:email_pass\n"

                    # –û–±—ä–µ–¥–∏–Ω—è–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å—Å–∫–∏–π —Ç–µ–∫—Å—Ç –∏ —Ç–µ–∫—Å—Ç —Ç–æ–≤–∞—Ä–æ–≤
                    full_text = (
                        description_message + CUSTOM_MESSAGES_IN_FILE + goods_text
                    )

                    file = BufferedInputFile(
                        full_text.encode(),
                        filename=f"order_{str(order_id)[:8]}_warpcast_accounts.txt",
                    )

                    await bot.send_document(tg_user_id, file)
                else:
                    # –ï—Å–ª–∏ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω–∞ —Ç–æ–ª—å–∫–æ —á–∞—Å—Ç—å –∞–∫–∫–∞—É–Ω—Ç–æ–≤
                    remaining_accounts = order["need_accounts"] - registered_accounts
                    partial_completion_message = (
                        f"üéâ –ó–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–ª–∏ –≤–∞–º <b>{registered_accounts} –∞–∫–∫–∞—É–Ω—Ç–æ–≤</b> "
                        f"{registered_accounts}/{order['need_accounts']} üéâ\n"
                        f"‚ö†Ô∏è–û–∂–∏–¥–∞–π—Ç–µ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—é –æ—Å—Ç–∞–≤—à–∏—Ö—Å—è {remaining_accounts} –∞–∫–∫–∞—É–Ω—Ç–æ–≤.\n\n"
                        f"üìù –ó–∞–∫–∞–∑ ‚Ññ: {order_id}:\n\n"
                        f"üîë –î–∞–Ω–Ω—ã–µ –∞–∫–∫–∞—É–Ω—Ç–∞:\n"
                        f"–í–≤–µ–¥–∏—Ç–µ –∫–æ–º–∞–Ω–¥—É —Å—Ç–∞—Ä—Ç –∏ –∫–ª–∏–∫–Ω–µ—Ç–µ –Ω–∞ –∫–Ω–æ–ø–∫—É –ø–æ–¥ —Å–æ–æ–±—â–µ–Ω–∏–µ–º —Å –Ω—É–∂–Ω—ã–º –∑–∞–∫–∞–∑–æ–º: /start"
                    )
                    await bot.send_message(
                        tg_user_id, partial_completion_message, parse_mode="HTML"
                    )

                    # –î–æ–±–∞–≤–ª—è–µ–º –∑–∞–ø–∏—Å–∏ –≤ PostgreSQL —Ç–æ–ª—å–∫–æ –¥–ª—è –æ—Å—Ç–∞–≤—à–∏—Ö—Å—è –∞–∫–∫–∞—É–Ω—Ç–æ–≤
                    await insert_queue_goods(
                        order_id, order["user_id"], remaining_accounts
                    )

            return

        # –ñ–¥–µ–º 30 —Å–µ–∫—É–Ω–¥ –ø–µ—Ä–µ–¥ —Å–ª–µ–¥—É—é—â–µ–π –ø—Ä–æ–≤–µ—Ä–∫–æ–π
        await asyncio.sleep(30)

    # –í—Ä–µ–º—è –∏—Å—Ç–µ–∫–ª–æ, –æ–ø–ª–∞—Ç–∞ –Ω–µ –ø–æ–ª—É—á–µ–Ω–∞
    await db.orders.update_one(
        {"_id": ObjectId(order_id)}, {"$set": {"status": "Cancel"}}
    )
    await bot.send_message(
        tg_user_id,
        f"‚ùå <b>–í –æ—Ç–≤–µ–¥–µ–Ω–Ω–æ–µ –≤—Ä–µ–º—è –æ–ø–ª–∞—Ç–∞ —Ç–∞–∫ –∏ –Ω–µ –ø–æ—Å—Ç—É–ø–∏–ª–∞, –ø–æ—ç—Ç–æ–º—É –∑–∞–∫–∞–∑ ‚Ññ{order_id} –æ—Ç–º–µ–Ω–µ–Ω.</b>",
        parse_mode="HTML",
    )


async def check_pending_orders():
    # –ü–æ–ª—É—á–∞–µ–º –≤—Å–µ –∑–∞–∫–∞–∑—ã –≤ —Å—Ç–∞—Ç—É—Å–µ "New"
    current_time = datetime.now(pytz.utc)
    pending_orders = await db.orders.find({"status": "New"}).to_list(None)

    for order in pending_orders:
        order_id = order["_id"]
        tg_user_id = order["tg_user_id"]
        total_price = order["price_sum"]
        create_date = order["create_date"]

        if create_date.tzinfo is None:
            create_date = pytz.utc.localize(create_date)

        # –í—ã—á–∏—Å–ª—è–µ–º –≤—Ä–µ–º—è –æ–∫–æ–Ω—á–∞–Ω–∏—è –æ–∂–∏–¥–∞–Ω–∏—è –æ–ø–ª–∞—Ç—ã (15 –º–∏–Ω—É—Ç –ø–æ—Å–ª–µ —Å–æ–∑–¥–∞–Ω–∏—è –∑–∞–∫–∞–∑–∞)
        end_time = create_date + timedelta(minutes=15)

        if current_time > end_time:
            # –í—Ä–µ–º—è –æ–∂–∏–¥–∞–Ω–∏—è –∏—Å—Ç–µ–∫–ª–æ, –º–µ–Ω—è–µ–º —Å—Ç–∞—Ç—É—Å –Ω–∞ "Cancel"
            await db.orders.update_one(
                {"_id": order_id}, {"$set": {"status": "Cancel"}}
            )

            # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é
            try:
                await bot.send_message(
                    tg_user_id,
                    f"‚ùå <b>–í –æ—Ç–≤–µ–¥–µ–Ω–Ω–æ–µ –≤—Ä–µ–º—è –æ–ø–ª–∞—Ç–∞ —Ç–∞–∫ –∏ –Ω–µ –ø–æ—Å—Ç—É–ø–∏–ª–∞, –ø–æ—ç—Ç–æ–º—É –∑–∞–∫–∞–∑ ‚Ññ{order_id} –æ—Ç–º–µ–Ω–µ–Ω.</b>",
                    parse_mode="HTML",
                )
            except Exception as e:
                print(f"–ù–µ —É–¥–∞–ª–æ—Å—å –æ—Ç–ø—Ä–∞–≤–∏—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é {tg_user_id}: {e}")
        else:
            logger.info(f"–ó–∞–ø—É—Å—Ç–∏–ª–∏ –æ–∂–∏–¥–∞–Ω–∏—è –ø–ª–∞—Ç–µ–∂–∞ {order_id}")
            # –í—Ä–µ–º—è –æ–∂–∏–¥–∞–Ω–∏—è –µ—â–µ –Ω–µ –∏—Å—Ç–µ–∫–ª–æ, –∑–∞–ø—É—Å–∫–∞–µ–º wait_for_payment
            await wait_for_payment(order_id, tg_user_id, total_price, end_time)
            # asyncio.create_task(
            #     wait_for_payment(order_id, tg_user_id, total_price, end_time)
            # )

    print(
        f"–ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–µ–∑–∞–≤–µ—Ä—à–µ–Ω–Ω—ã—Ö –∑–∞–∫–∞–∑–æ–≤ –∑–∞–≤–µ—Ä—à–µ–Ω–∞. –û–±—Ä–∞–±–æ—Ç–∞–Ω–æ –∑–∞–∫–∞–∑–æ–≤: {len(pending_orders)}"
    )


async def check_queue_goods_table():
    async with asyncpg.create_pool(PG_DATABASE_URL) as pool:
        async with pool.acquire() as connection:
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å—É—â–µ—Å—Ç–≤–æ–≤–∞–Ω–∏–µ —Ç–∞–±–ª–∏—Ü—ã
            table_exists = await connection.fetchval(
                """
                SELECT EXISTS (
                    SELECT FROM information_schema.tables
                    WHERE table_name = 'queue_goods'
                );
            """
            )

            if not table_exists:
                # –ï—Å–ª–∏ —Ç–∞–±–ª–∏—Ü–∞ –Ω–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç, —Å–æ–∑–¥–∞–µ–º –µ–µ
                await connection.execute(
                    """
                    CREATE TABLE queue_goods (
                        id SERIAL PRIMARY KEY,
                        uuid UUID NOT NULL,
                        create_date TIMESTAMP WITH TIME ZONE NOT NULL,
                        update_date TIMESTAMP WITH TIME ZONE NOT NULL,
                        order_id TEXT NOT NULL,
                        user_id TEXT NOT NULL,
                        status TEXT NOT NULL
                    );
                """
                )
                print("–¢–∞–±–ª–∏—Ü–∞ queue_goods —É—Å–ø–µ—à–Ω–æ —Å–æ–∑–¥–∞–Ω–∞.")
            else:
                print("–¢–∞–±–ª–∏—Ü–∞ queue_goods —É–∂–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç.")


async def main():
    logger.info("–ó–∞–ø—É—Å—Ç–∏–ª–∏ —á–µ–∫–µ—Ä")
    await check_pending_orders()
    await check_queue_goods_table()


if __name__ == "__main__":
    asyncio.run(main())
