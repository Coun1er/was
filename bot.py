import asyncio
import hashlib
import json
import logging
import os
import uuid
from datetime import datetime, timedelta
from enum import Enum
from math import ceil
from typing import List, Tuple

import asyncpg
import pytz
from aiogram import Bot, Dispatcher, types
from aiogram.filters import Command
from aiogram.fsm.context import FSMContext
from aiogram.fsm.state import State, StatesGroup
from aiogram.fsm.storage.redis import RedisStorage
from aiogram.types import (
    BufferedInputFile,
    CallbackQuery,
    FSInputFile,
    InlineKeyboardButton,
    InlineKeyboardMarkup,
)
from aiogram.utils.keyboard import InlineKeyboardBuilder
from aiogram.webhook.aiohttp_server import (
    SimpleRequestHandler,
    setup_application,
)
from aiohttp import web
from bson import ObjectId
from loguru import logger
from motor.motor_asyncio import AsyncIOMotorClient
from PIL import Image, ImageDraw, ImageFont
from web3 import AsyncHTTPProvider, AsyncWeb3, Web3

from custom_message import CUSTOM_MESSAGES_IN_FILE

# –ù–∞—Å—Ç—Ä–æ–π–∫–∏ –±–æ—Ç–∞
BOT_TOKEN = os.getenv("BOT_TOKEN")
MONGO_URL = os.getenv("MONGO_URL")
DB_NAME = os.getenv("DB_NAME")
PG_DATABASE_URL = f'postgresql://{os.getenv("POSTGRES_USER")}:{os.getenv("POSTGRES_PASSWORD")}@postgres:5432/{os.getenv("POSTGRES_DB")}'
ORDERS_PER_PAGE = 5

# –ù–∞—Å—Ç—Ä–æ–π–∫–∏ Webhook
DOMAIN = os.getenv("DOMAIN")
WEBHOOK = os.getenv("WEBHOOK")
WEBHOOK_SECRET = os.getenv("WEBHOOK_SECRET")
WEB_SERVER_HOST = "0.0.0.0"
WEB_SERVER_PORT = 3001
WEBHOOK_PATH = "/webhook"

# –•–µ—à –¥–ª—è –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –∫–∞—Ä—Ç–∏–Ω–∫–∏ —Å —Ü–µ–Ω–∞–º–∏
CURRENT_PRICE_HASH = None

logging.basicConfig(level=logging.INFO)

# –°–æ–∑–¥–∞–Ω–∏–µ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ Redis –∏ –µ–≥–æ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –¥–ª—è aiogramm
# redis_client = redis.Redis(host="redis", port=6379, db=0)
storage = RedisStorage.from_url("redis://redis:6379/0")

# –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –±–æ—Ç–∞ –∏ –¥–∏—Å–ø–µ—Ç—á–µ—Ä–∞
bot = Bot(token=BOT_TOKEN)
dp = Dispatcher(storage=storage)

# –ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ MongoDB
client = AsyncIOMotorClient(MONGO_URL)
db = client[DB_NAME]

# –ì—Ä–∞–¥–∞—Ü–∏–∏ —Ü–µ–Ω
price_gradations = [
    (1, 15.99),
    (3, 14.99),
    (6, 13.99),
    (11, 13.49),
    (101, 11.99),
    (float("inf"), 11.99),
]


# –°–ø–∏—Å–æ–∫ –∞–¥–º–∏–Ω–æ–≤
ADMIN_IDS = [
    306409980,
]


# –û–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ –ø–µ—Ä–µ—á–∏—Å–ª–µ–Ω–∏—è Status
class Status(str, Enum):
    NEW = "New"
    WORKED = "Worked"
    DONE = "Done"
    CANCEL = "Cancel"


# –û–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ —Å–æ—Å—Ç–æ—è–Ω–∏–π –¥–ª—è FSM
class OrderStates(StatesGroup):
    waiting_for_quantity = State()
    waiting_for_confirmation = State()


# –ü—Ä–∏–≤–µ—Ç—Å—Ç–≤–µ–Ω–Ω—ã–π —Ç–µ–∫—Å—Ç
START_TEXT = "–ú–µ–Ω—è –∑–æ–≤—É—Ç <b>–í–∞—Ä–ø—Ä–µ–≥–µ—Ä –ú–∏—Ö–∞–ª—ã—á</b>, —è –±–æ—Ç –∫–æ—Ç–æ—Ä—ã–π —É–º–µ–µ—Ç —Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞—Ç—å –∞–∫–∫–∞—É–Ω—Ç—ã –¥–ª—è –í–∞—Ä–∫–∞—Å—Ç–∞."
FUNCTION_TEXT = (
    "üìä <b>–ß—Ç–æ–±—ã –ø–æ—Å–º–æ—Ç—Ä–µ—Ç—å —Ü–µ–Ω—ã –∏–ª–∏ –æ—Ñ–æ—Ä–º–∏—Ç—å –∑–∞–∫–∞–∑, —Ç—ã–∫–∞–π —Å—é–¥–∞:</b> /new_order"
)


# –§—É–Ω–∫—Ü–∏—è –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –∏–ª–∏ —Å–æ–∑–¥–∞–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
async def get_or_create_user(tg_user_id, tg_username):
    user = await db.users.find_one({"tg_user_id": tg_user_id})
    if not user:
        user = {
            "_id": ObjectId(),
            "create_date": datetime.utcnow(),
            "update_date": datetime.utcnow(),
            "tg_username": tg_username,
            "tg_user_id": tg_user_id,
        }
        await db.users.insert_one(user)
    return user


@dp.message(Command("start"))
async def cmd_start(message: types.Message):
    # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –ø—Ä–æ–º–µ–∂—É—Ç–æ—á–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ
    processing_msg = await message.answer("–û–±—Ä–∞–±–æ—Ç–∫–∞...")

    user = await get_or_create_user(message.from_user.id, message.from_user.username)
    username = message.from_user.username or message.from_user.first_name
    orders = await db.orders.find({"user_id": user["_id"]}).to_list(length=None)

    if orders:
        orders_text = format_orders_text(orders)
        response = f"üëã <b>–ü—Ä–∏–≤–µ—Ç, {username}!</b> \n\n{START_TEXT} \n\nüóÇÔ∏è <b>–ò—Å—Ç–æ—Ä–∏—è —Ç–≤–æ–∏—Ö –ø—Ä–µ–¥—ã–¥—É—â–∏—Ö –∑–∞–∫–∞–∑–æ–≤:</b>\n\n{orders_text}\n\n{FUNCTION_TEXT}\n\nüì• –ß—Ç–æ–±—ã –ø–æ–ª—É—á–∏—Ç—å —Ç–æ–≤–∞—Ä—ã –∑–∞–∫–∞–∑–∞, –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ –∫–Ω–æ–ø–∫–∏ –Ω–∏–∂–µ:"
    else:
        response = f"üëã <b>–ü—Ä–∏–≤–µ—Ç, {username}!</b> \n\n{START_TEXT} \n\n–£ —Ç–µ–±—è –µ—â–µ –Ω–µ—Ç –∑–∞–∫–∞–∑–æ–≤.\n\n {FUNCTION_TEXT}"

    keyboard = create_orders_keyboard(orders, 0)
    photo = FSInputFile("desc.png")

    # –£–¥–∞–ª—è–µ–º –ø—Ä–æ–º–µ–∂—É—Ç–æ—á–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ
    await processing_msg.delete()

    # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Ñ–∏–Ω–∞–ª—å–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ
    await message.answer_photo(
        photo=photo, caption=response, parse_mode="HTML", reply_markup=keyboard
    )


@dp.message(Command("support"))
async def support_command(message: types.Message):
    support_text = (
        "üìû <b>–ü–æ–¥–¥–µ—Ä–∂–∫–∞</b>\n\n"
        "–ü–æ –≤—Å–µ–º –≤–æ–ø—Ä–æ—Å–∞–º –ø–∏—Å–∞—Ç—å: @Coun1er\n"
        "‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ\n"
        "‚ö†Ô∏è <b>–í–Ω–∏–º–∞–Ω–∏–µ!</b>\n"
        "–í —Å–∞–ø–ø–æ—Ä—Ç –ø–∏—Å–∞—Ç—å —Ç–æ–ª—å–∫–æ –≤ —Å–∞–º–æ–º –∫—Ä–∞–π–Ω–µ–º —Å–ª—É—á–∞–µ –∏ —Å –æ–±—è–∑–∞—Ç–µ–ª—å–Ω–æ–π "
        "–ø–æ–º–µ—Ç–∫–æ–π –≤ —Å–æ–æ–±—â–µ–Ω–∏–∏ <code>warpcast reger bot</code>.\n\n"
        "‚ùóÔ∏è –°–æ–æ–±—â–µ–Ω–∏—è –±–µ–∑ –ø–æ–º–µ—Ç–∫–∏ –æ—Å—Ç–∞–Ω—É—Ç—Å—è –±–µ–∑ –æ—Ç–≤–µ—Ç–∞.\n"
        "üö´ –°–æ–æ–±—â–µ–Ω–∏—è —Å –≥–ª—É–ø—ã–º–∏ –≤–æ–ø—Ä–æ—Å–∞–º–∏ –ø—Ä–∏–≤–µ–¥—É—Ç –∫ –º–≥–Ω–æ–≤–µ–Ω–Ω–æ–º—É –±–∞–Ω—É."
    )

    await message.answer(support_text, parse_mode="HTML")


@dp.message(Command("stats"))
async def stats_command(message: types.Message):
    if message.from_user.id not in ADMIN_IDS:
        return

    # –ü–æ–ª—É—á–∞–µ–º –≤—Å–µ –∑–∞–∫–∞–∑—ã —Å–æ —Å—Ç–∞—Ç—É—Å–æ–º "Worked"
    pipeline = [
        {"$match": {"status": "Worked"}},
        {
            "$group": {
                "_id": None,
                "total_orders": {"$sum": 1},
                "total_accounts_needed": {"$sum": "$need_accounts"},
                "total_accounts_registered": {"$sum": "$registration_accounts"},
                "total_price_sum": {"$sum": "$price_sum"},
            }
        },
    ]

    result = await db.orders.aggregate(pipeline).to_list(length=None)

    if not result:
        await message.reply("–ù–∞ –¥–∞–Ω–Ω—ã–π –º–æ–º–µ–Ω—Ç –Ω–µ—Ç –∑–∞–∫–∞–∑–æ–≤ –≤ —Ä–∞–±–æ—Ç–µ.")
        return

    stats = result[0]
    total_orders = stats["total_orders"]
    total_accounts_needed = stats["total_accounts_needed"]
    total_accounts_registered = stats["total_accounts_registered"]
    total_price_sum = stats["total_price_sum"]
    accounts_in_queue = total_accounts_needed - total_accounts_registered

    # –†–∞—Å—Å—á–∏—Ç—ã–≤–∞–µ–º –ø—Ä–æ—Ü–µ–Ω—Ç—ã
    if total_accounts_needed > 0:
        registered_percent = (total_accounts_registered / total_accounts_needed) * 100
        queue_percent = (accounts_in_queue / total_accounts_needed) * 100
    else:
        registered_percent = 0
        queue_percent = 0

    moscow_tz = pytz.timezone("Europe/Moscow")
    today = datetime.now(moscow_tz).strftime("%d.%m.%Y")

    response = f"""
<b>–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –∑–∞–∫–∞–∑–æ–≤ –≤ —Ä–∞–±–æ—Ç–µ (Worked):</b>

–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –∑–∞–∫–∞–∑–æ–≤: <b>{total_orders}</b>
–û–±—â–∞—è —Å—É–º–º–∞ –∑–∞–∫–∞–∑–æ–≤: <b>${total_price_sum:.2f}</b>
–û–±—â–µ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –∞–∫–∫–∞—É–Ω—Ç–æ–≤: <b>{total_accounts_needed}</b>
–£–∂–µ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω–æ: <b>{total_accounts_registered}</b> ({registered_percent:.2f}%)
–ù–∞ —Å–µ–≥–æ–¥–Ω—è ({today}) –æ—á–µ—Ä–µ–¥—å –Ω–∞ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—é: <b>{accounts_in_queue}</b> ({queue_percent:.2f}%)
"""

    await message.answer(response, parse_mode="HTML")


@dp.message(Command("statspay"))
async def statspay_command(message: types.Message):
    if message.from_user.id not in ADMIN_IDS:
        return

    # –ü–æ–ª—É—á–∞–µ–º —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –ø–æ –∑–∞–∫–∞–∑–∞–º
    pipeline = [
        {"$match": {"status": {"$in": ["Worked", "Done"]}}},
        {
            "$group": {
                "_id": "$status",
                "count": {"$sum": 1},
                "total_sum": {"$sum": "$price_sum"},
                "total_accounts": {"$sum": "$need_accounts"},
                "withdrawn": {
                    "$sum": {"$cond": [{"$eq": ["$withdrawal", True]}, 1, 0]}
                },
                "withdrawn_sum": {
                    "$sum": {"$cond": [{"$eq": ["$withdrawal", True]}, "$price_sum", 0]}
                },
                "withdrawn_accounts": {
                    "$sum": {
                        "$cond": [{"$eq": ["$withdrawal", True]}, "$need_accounts", 0]
                    }
                },
                "paid_profit": {
                    "$sum": {"$cond": [{"$eq": ["$paid", True]}, "$profit", 0]}
                },
                "unpaid_profit": {
                    "$sum": {
                        "$cond": [
                            {
                                "$and": [
                                    {"$eq": ["$withdrawal", True]},
                                    {"$ne": ["$paid", True]},
                                ]
                            },
                            "$profit",
                            0,
                        ]
                    }
                },
            }
        },
        {
            "$group": {
                "_id": None,
                "statuses": {"$push": "$$ROOT"},
                "total_orders": {"$sum": "$count"},
                "total_sum": {"$sum": "$total_sum"},
                "total_accounts": {"$sum": "$total_accounts"},
                "total_withdrawn": {"$sum": "$withdrawn"},
                "total_withdrawn_sum": {"$sum": "$withdrawn_sum"},
                "total_withdrawn_accounts": {"$sum": "$withdrawn_accounts"},
                "total_paid_profit": {"$sum": "$paid_profit"},
                "total_unpaid_profit": {"$sum": "$unpaid_profit"},
            }
        },
    ]

    result = await db.orders.aggregate(pipeline).to_list(length=None)

    if not result:
        await message.reply("–ù–∞ –¥–∞–Ω–Ω—ã–π –º–æ–º–µ–Ω—Ç –Ω–µ—Ç –∑–∞–∫–∞–∑–æ–≤ –≤ —Å—Ç–∞—Ç—É—Å–µ Worked –∏–ª–∏ Done.")
        return

    stats = result[0]
    total_orders = stats["total_orders"]
    total_sum = stats["total_sum"]
    total_accounts = stats["total_accounts"]
    total_withdrawn = stats["total_withdrawn"]
    total_withdrawn_sum = stats["total_withdrawn_sum"]
    total_withdrawn_accounts = stats["total_withdrawn_accounts"]
    total_paid_profit = stats["total_paid_profit"]
    total_unpaid_profit = stats["total_unpaid_profit"]

    # –í—ã—á–∏—Å–ª—è–µ–º —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –ø–æ —Å—Ç–∞—Ç—É—Å–∞–º
    status_stats = {status["_id"]: status for status in stats["statuses"]}

    # –í—ã—á–∏—Å–ª—è–µ–º –Ω–µ–≤—ã–≤–µ–¥–µ–Ω–Ω—ã–µ –∑–∞–∫–∞–∑—ã
    not_withdrawn = total_orders - total_withdrawn
    not_withdrawn_sum = total_sum - total_withdrawn_sum
    not_withdrawn_accounts = total_accounts - total_withdrawn_accounts

    # –í—ã—á–∏—Å–ª—è–µ–º —Å—Ä–µ–¥–Ω—é—é –ø—Ä–∏–±—ã–ª—å —Å –∞–∫–∫–∞—É–Ω—Ç–∞
    avg_profit_per_account = (
        (total_paid_profit + total_unpaid_profit) / total_accounts
        if total_accounts > 0
        else 0
    )

    # –í—ã—á–∏—Å–ª—è–µ–º —Å—Ä–µ–¥–Ω—é—é –æ–ø–ª–∞—Ç—É –∑–∞ –∞–∫–∫–∞—É–Ω—Ç –¥–ª—è –Ω–µ–≤—ã–≤–µ–¥–µ–Ω–Ω—ã—Ö –∑–∞–∫–∞–∑–æ–≤
    avg_price_per_account = (
        not_withdrawn_sum / not_withdrawn_accounts if not_withdrawn_accounts > 0 else 0
    )

    moscow_tz = pytz.timezone("Europe/Moscow")
    now = datetime.now(moscow_tz).strftime("%d.%m.%Y %H:%M")

    response = f"""
<b>–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –∑–∞–∫–∞–∑–æ–≤ –∏ –≤—ã–ø–ª–∞—Ç –Ω–∞ {now} (–ú–°–ö):</b>

–í—Å–µ–≥–æ –∑–∞–∫–∞–∑–æ–≤ (Worked –∏ Done): <b>{total_orders}</b> –Ω–∞ –æ–±—â—É—é —Å—É–º–º—É <b>${total_sum:.2f}</b>
- Worked: <b>{status_stats.get('Worked', {}).get('count', 0)}</b> –∑–∞–∫–∞–∑–æ–≤ –Ω–∞ —Å—É–º–º—É <b>${status_stats.get('Worked', {}).get('total_sum', 0):.2f}</b>
- Done: <b>{status_stats.get('Done', {}).get('count', 0)}</b> –∑–∞–∫–∞–∑–æ–≤ –Ω–∞ —Å—É–º–º—É <b>${status_stats.get('Done', {}).get('total_sum', 0):.2f}</b>

–í—ã–≤–æ–¥—ã –¥–µ–Ω–µ–≥:
üí∞ –í—ã–≤–µ–¥–µ–Ω—ã <b>{total_withdrawn}</b> –∑–∞–∫–∞–∑–æ–≤ –Ω–∞ —Å—É–º–º—É <b>${total_withdrawn_sum:.2f}</b> ({total_withdrawn_sum/total_sum*100:.2f}% –æ—Ç –æ–±—â–µ–π —Å—É–º–º—ã)
- –£–∂–µ –≤—ã–ø–ª–∞—á–µ–Ω–Ω–∞—è –ø—Ä–∏–±—ã–ª—å: <b>${total_paid_profit:.2f}</b>
- –û–±—â–∞—è –ø—Ä–∏–±—ã–ª—å –∫ –≤—ã–ø–ª–∞—Ç–µ: <b>${total_unpaid_profit:.2f}</b>
- –°—Ä–µ–¥–Ω—è—è –ø—Ä–∏–±—ã–ª—å —Å –∞–∫–∫–∞—É–Ω—Ç–∞: <b>${avg_profit_per_account:.2f}</b>

‚ùå –ù–µ –≤—ã–≤–µ–¥–µ–Ω—ã <b>{not_withdrawn}</b> –∑–∞–∫–∞–∑–æ–≤ –Ω–∞ —Å—É–º–º—É <b>${not_withdrawn_sum:.2f}</b> ({not_withdrawn_sum/total_sum*100:.2f}% –æ—Ç –æ–±—â–µ–π —Å—É–º–º—ã)
- –û–±—â–µ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –∞–∫–∫–∞—É–Ω—Ç–æ–≤ –≤ –Ω–µ–≤—ã–≤–µ–¥–µ–Ω–Ω—ã—Ö –∑–∞–∫–∞–∑–∞—Ö: <b>{not_withdrawn_accounts}</b>
- –°—Ä–µ–¥–Ω—è—è –æ–ø–ª–∞—Ç–∞ –∑–∞ –∞–∫–∫–∞—É–Ω—Ç: <b>${avg_price_per_account:.2f}</b>
"""

    await message.answer(response, parse_mode="HTML")


@dp.message(Command("admin"))
async def admin_command(message: types.Message):
    if message.from_user.id not in ADMIN_IDS:
        return

    response = """
<b>–ü–∞–Ω–µ–ª—å –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞</b>

–î–æ—Å—Ç—É–ø–Ω—ã–µ –∫–æ–º–∞–Ω–¥—ã:

1. /stats - –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –∑–∞–∫–∞–∑–æ–≤
   –≠—Ç–∞ –∫–æ–º–∞–Ω–¥–∞ –ø–æ–∫–∞–∑—ã–≤–∞–µ—Ç –æ–±—â—É—é —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –ø–æ —Ç–µ–∫—É—â–∏–º "Worked" –∑–∞–∫–∞–∑–∞–º, –≤–∫–ª—é—á–∞—è –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –∑–∞–∫–∞–∑–æ–≤, –æ–±—â–µ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –∞–∫–∫–∞—É–Ω—Ç–æ–≤, –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω–Ω—ã—Ö –∞–∫–∫–∞—É–Ω—Ç–æ–≤ –∏ –∞–∫–∫–∞—É–Ω—Ç–æ–≤ –≤ –æ—á–µ—Ä–µ–¥–∏.

2. /statspay - –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –≤—ã–ø–ª–∞—Ç
   –≠—Ç–∞ –∫–æ–º–∞–Ω–¥–∞ –ø—Ä–µ–¥–æ—Å—Ç–∞–≤–ª—è–µ—Ç –¥–µ—Ç–∞–ª—å–Ω—É—é –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –∑–∞–∫–∞–∑–∞—Ö –≤ —Å—Ç–∞—Ç—É—Å–∞—Ö "Worked" –∏ "Done", –≤–∫–ª—é—á–∞—è –æ–±—â—É—é —Å—É–º–º—É –∑–∞–∫–∞–∑–æ–≤, —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –ø–æ –≤—ã–≤–µ–¥–µ–Ω–Ω—ã–º –∏ –Ω–µ–≤—ã–≤–µ–¥–µ–Ω–Ω—ã–º –∑–∞–∫–∞–∑–∞–º, –ø—Ä–∏–±—ã–ª—å –∏ —Å—Ä–µ–¥–Ω—é—é —Å—Ç–æ–∏–º–æ—Å—Ç—å –∞–∫–∫–∞—É–Ω—Ç–∞.

–í—ã –º–æ–∂–µ—Ç–µ —Å–∫–æ–ø–∏—Ä–æ–≤–∞—Ç—å –∏ –≤—Å—Ç–∞–≤–∏—Ç—å —ç—Ç–∏ –∫–æ–º–∞–Ω–¥—ã –≤ —á–∞—Ç –¥–ª—è –∏—Ö –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è.
"""

    await message.answer(response, parse_mode="HTML")


@dp.message(Command("postforall"))
async def cmd_postforall(message: types.Message):
    if message.from_user.id not in ADMIN_IDS:
        return

    if not message.reply_to_message:
        await message.answer(
            "–≠—Ç–∞ –∫–æ–º–∞–Ω–¥–∞ –¥–æ–ª–∂–Ω–∞ –±—ã—Ç—å –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–∞ –≤ –æ—Ç–≤–µ—Ç –Ω–∞ —Å–æ–æ–±—â–µ–Ω–∏–µ, –∫–æ—Ç–æ—Ä–æ–µ –≤—ã —Ö–æ—Ç–∏—Ç–µ —Ä–∞–∑–æ—Å–ª–∞—Ç—å."
        )
        return

    processing_msg = await message.answer("–û–±—Ä–∞–±–æ—Ç–∫–∞...")

    post_to_send = message.reply_to_message

    # users = await db.users.find().to_list(length=None)
    users = [
        306409980,
    ]

    total_users = len(users)
    success_count = 0
    fail_count = 0

    for index, user in enumerate(users, start=1):
        tg_user_id = user["tg_user_id"]

        for attempt in range(3):
            try:
                if post_to_send.photo:
                    await message.bot.send_photo(
                        chat_id=tg_user_id,
                        photo=post_to_send.photo[-1].file_id,
                        caption=post_to_send.caption,
                        caption_entities=post_to_send.caption_entities,
                    )
                else:
                    await message.bot.send_message(
                        chat_id=tg_user_id,
                        text=post_to_send.text,
                        entities=post_to_send.entities,
                    )
                success_count += 1
                break
            except Exception:
                if attempt == 2:
                    fail_count += 1
            await asyncio.sleep(0.05)

            if index % 30 == 0:
                await processing_msg.edit_text(f"–û–±—Ä–∞–±–æ—Ç–∫–∞... {index}/{total_users}")

        await asyncio.sleep(0.1)
    success_percent = (success_count / total_users) * 100 if total_users > 0 else 0
    fail_percent = (fail_count / total_users) * 100 if total_users > 0 else 0

    report = (
        f"–í—Å–µ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π: {total_users}\n"
        f"–£—Å–ø–µ—à–Ω–æ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ: {success_count} ({success_percent:.2f}%)\n"
        f"–ù–µ —É–¥–∞–ª–æ—Å—å –æ—Ç–ø—Ä–∞–≤–∏—Ç—å: {fail_count} ({fail_percent:.2f}%)"
    )

    await processing_msg.edit_text(report)


def format_orders_text(orders):
    orders_text = ""
    moscow_tz = pytz.timezone("Europe/Moscow")
    for order in orders:
        order_id = str(order["_id"])
        order_id_short = order_id[-8:]
        create_date = order.get("create_date")
        if isinstance(create_date, datetime):
            create_date = create_date.replace(tzinfo=pytz.UTC).astimezone(moscow_tz)
            create_date_str = create_date.strftime("%d.%m.%Y %H:%M")
        else:
            create_date_str = "–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ"
        need_accounts = order.get("need_accounts", 0)
        registration_accounts = order.get("registration_accounts", 0)
        status = order.get("status", "–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ")
        price_sum = order.get("price_sum", 0)

        orders_text += f"{order_id_short} | {create_date_str} | {need_accounts}/{registration_accounts} | {status} | ${price_sum:.2f}\n"
    return orders_text


def create_orders_keyboard(orders, page):
    keyboard_builder = InlineKeyboardBuilder()
    # –§–∏–ª—å—Ç—Ä—É–µ–º –∑–∞–∫–∞–∑—ã —Å registration_accounts > 0
    downloadable_orders = [
        order for order in orders if order.get("registration_accounts", 0) > 0
    ]
    # –í—ã—á–∏—Å–ª—è–µ–º –æ–±—â–µ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —Å—Ç—Ä–∞–Ω–∏—Ü
    total_pages = ceil(len(downloadable_orders) / ORDERS_PER_PAGE)
    # –ü–æ–ª—É—á–∞–µ–º –∑–∞–∫–∞–∑—ã –¥–ª—è —Ç–µ–∫—É—â–µ–π —Å—Ç—Ä–∞–Ω–∏—Ü—ã
    start_idx = page * ORDERS_PER_PAGE
    end_idx = start_idx + ORDERS_PER_PAGE
    current_page_orders = downloadable_orders[start_idx:end_idx]

    for order in current_page_orders:
        order_id = str(order["_id"])
        order_id_short = order_id[-8:]
        registration_accounts = order.get("registration_accounts", 0)
        need_accounts = order.get("need_accounts", 0)
        button_text = (
            f"–°–∫–∞—á–∞—Ç—å ‚Ññ{order_id_short} {registration_accounts}/{need_accounts}"
        )
        keyboard_builder.row(
            InlineKeyboardButton(
                text=button_text, callback_data=f"order_goods:{order_id}"
            )
        )

    # –î–æ–±–∞–≤–ª—è–µ–º –Ω–∞–≤–∏–≥–∞—Ü–∏–æ–Ω–Ω—ã–µ –∫–Ω–æ–ø–∫–∏
    nav_buttons = []
    if page > 0:
        nav_buttons.append(
            InlineKeyboardButton(text="‚óÄÔ∏è –ù–∞–∑–∞–¥", callback_data=f"page:{page-1}")
        )
    if page < total_pages - 1:
        nav_buttons.append(
            InlineKeyboardButton(text="–í–ø–µ—Ä–µ–¥ ‚ñ∂Ô∏è", callback_data=f"page:{page+1}")
        )
    keyboard_builder.row(*nav_buttons)

    return keyboard_builder.as_markup()


@dp.callback_query(lambda c: c.data.startswith("page:"))
async def process_page_button(callback_query: CallbackQuery):
    page = int(callback_query.data.split(":")[1])
    user = await get_or_create_user(
        callback_query.from_user.id, callback_query.from_user.username
    )
    orders = await db.orders.find({"user_id": user["_id"]}).to_list(length=None)

    keyboard = create_orders_keyboard(orders, page)
    await callback_query.message.edit_reply_markup(reply_markup=keyboard)
    await callback_query.answer()


async def cmd_order_goods(message: types.Message, order_id: str = None):
    if order_id is None:
        order_id = message.text.split()[1] if len(message.text.split()) > 1 else None
    if not order_id:
        await message.answer("–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, —É–∫–∞–∂–∏—Ç–µ ID –∑–∞–∫–∞–∑–∞.")
        return

    # –ü–æ–ª—É—á–∞–µ–º tg_id –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è, –æ—Ç–ø—Ä–∞–≤–∏–≤—à–µ–≥–æ –∑–∞–ø—Ä–æ—Å
    tg_user_id = message.chat.id

    # –ù–∞—Ö–æ–¥–∏–º –∑–∞–∫–∞–∑ –∏ –ø—Ä–æ–≤–µ—Ä—è–µ–º, –ø—Ä–∏–Ω–∞–¥–ª–µ–∂–∏—Ç –ª–∏ –æ–Ω –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é
    order = await db.orders.find_one({"_id": ObjectId(order_id)})
    if not order:
        await message.answer("–ó–∞–∫–∞–∑ –Ω–µ –Ω–∞–π–¥–µ–Ω")
        return

    # –ü—Ä–æ–≤–µ—Ä–∫–∞ –ø—Ä–∏–Ω–∞–¥–ª–µ–∂–Ω–æ—Å—Ç–∏ –∑–∞–∫–∞–∑–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é
    if order.get("tg_user_id") != tg_user_id:
        await message.answer("–£ –≤–∞—Å –Ω–µ—Ç –¥–æ—Å—Ç—É–ø–∞ –∫ —ç—Ç–∏–º –¥–∞–Ω–Ω—ã–º")
        return

    # –û—Å—Ç–∞–ª—å–Ω–æ–π –∫–æ–¥ —Ñ—É–Ω–∫—Ü–∏–∏ –æ—Å—Ç–∞–µ—Ç—Å—è –±–µ–∑ –∏–∑–º–µ–Ω–µ–Ω–∏–π
    goods_ids = order.get("goods", [])
    goods_object_ids = [ObjectId(gid) for gid in goods_ids]
    goods = await db.goods.find({"_id": {"$in": goods_object_ids}}).to_list(length=None)

    if not goods:
        await message.answer("–î–ª—è —ç—Ç–æ–≥–æ –∑–∞–∫–∞–∑–∞ –Ω–µ—Ç –¥–æ—Å—Ç—É–ø–Ω—ã—Ö —Ç–æ–≤–∞—Ä–æ–≤")
        return

    goods_text = "\n".join(
        [f"{g['seed']}:{g['email_login']}:{g['email_pass']}" for g in goods]
    )

    description_message = (
        f"–ó–∞–∫–∞–∑: {str(order_id)}\n–§–æ—Ä–º–∞—Ç –≤—ã–¥–∞—á–∏: private_seed:email_login:email_pass\n"
    )

    # –û–±—ä–µ–¥–∏–Ω—è–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å—Å–∫–∏–π —Ç–µ–∫—Å—Ç –∏ —Ç–µ–∫—Å—Ç —Ç–æ–≤–∞—Ä–æ–≤
    full_text = description_message + CUSTOM_MESSAGES_IN_FILE + goods_text

    file = BufferedInputFile(
        full_text.encode(),
        filename=f"order_{str(order_id)[:8]}_warpcast_accounts.txt",
    )

    await message.answer_document(file)


# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –¥–ª—è callback-–∑–∞–ø—Ä–æ—Å–æ–≤ –æ—Ç inline –∫–Ω–æ–ø–æ–∫
@dp.callback_query(lambda c: c.data.startswith("order_goods:"))
async def process_order_goods_button(callback_query: types.CallbackQuery):
    order_id = callback_query.data.split(":")[1]
    await cmd_order_goods(callback_query.message, order_id)
    await callback_query.answer()


# –û–±–Ω–æ–≤–ª—è–µ–º —Ö—ç–Ω–¥–ª–µ—Ä –¥–ª—è –∫–æ–º–∞–Ω–¥—ã /order_goods
@dp.message(Command("order_goods"))
async def order_goods_command(message: types.Message):
    await cmd_order_goods(message)


async def get_usdc_balance(w3: AsyncWeb3, abi: str, address: str) -> int:
    contract_address = w3.to_checksum_address(
        "0x833589fCD6eDb6E08f4c7C32D4f71b54bdA02913"
    )
    contract_instance = w3.eth.contract(address=contract_address, abi=abi)

    max_retries = 5
    delay = 1.0

    for attempt in range(max_retries):
        try:
            balance_wei = await contract_instance.functions.balanceOf(address).call()
            balance_human = balance_wei / 10**6
            logger.info(f"–ë–∞–ª–∞–Ω—Å —É –∫–æ—à–µ–ª—å–∫–∞ {address} | {balance_human}")
            return balance_human
        except Exception as e:
            if attempt == max_retries - 1:
                raise Exception(
                    f"–ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å –±–∞–ª–∞–Ω—Å USDC –ø–æ—Å–ª–µ {max_retries} –ø–æ–ø—ã—Ç–æ–∫: {str(e)}"
                )
            print(
                f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –±–∞–ª–∞–Ω—Å–∞ USDC (–ø–æ–ø—ã—Ç–∫–∞ {attempt + 1}/{max_retries}): {str(e)}"
            )
            await asyncio.sleep(delay)

    raise Exception(f"–ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å –±–∞–ª–∞–Ω—Å USDC –ø–æ—Å–ª–µ {max_retries} –ø–æ–ø—ã—Ç–æ–∫")


async def insert_queue_goods(order_id: str, user_id: int, num_accounts: int):
    async with asyncpg.create_pool(PG_DATABASE_URL) as pool:
        async with pool.acquire() as connection:
            values = [
                (
                    str(uuid.uuid4()),
                    datetime.now(pytz.utc),
                    str(order_id),
                    str(user_id),
                    "New",
                )
                for _ in range(num_accounts)
            ]
            await connection.executemany(
                """
                INSERT INTO queue_goods (uuid, create_date, update_date, order_id, user_id, status)
                VALUES ($1, $2, $2, $3, $4, $5)
            """,
                values,
            )


async def wait_for_payment(
    order_id: str, tg_user_id: int, total_price: float, end_time: datetime
):
    w3 = AsyncWeb3(
        AsyncHTTPProvider(
            "https://rpc.ankr.com/base/0fcbbecbee6b3e6cf1913685722910b744f4809c966b7f950ebec3ecb7fd29ef"
        )
    )
    current_dir = os.path.dirname(os.path.abspath(__file__))
    with open(os.path.join(current_dir, "data/erc_20_abi.json"), "r") as f:
        ERC_20 = f.read()

    while datetime.now(pytz.utc) < end_time:
        order = await db.orders.find_one({"_id": ObjectId(order_id)})
        if not order:
            return  # –ó–∞–∫–∞–∑ –Ω–µ –Ω–∞–π–¥–µ–Ω, –≤—ã—Ö–æ–¥–∏–º –∏–∑ —Ñ—É–Ω–∫—Ü–∏–∏

        balance_in_usdc = await get_usdc_balance(
            w3=w3, abi=ERC_20, address=order["pay_address"]
        )
        if balance_in_usdc >= total_price or order["status"] == "Worked":
            # –û–ø–ª–∞—Ç–∞ –ø–æ–ª—É—á–µ–Ω–∞
            await db.orders.update_one(
                {"_id": ObjectId(order_id)}, {"$set": {"status": "Worked"}}
            )

            # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –æ–± —É—Å–ø–µ—à–Ω–æ–π –æ–ø–ª–∞—Ç–µ
            await bot.send_message(
                tg_user_id,
                f"‚úÖ –û–ø–ª–∞—Ç–∞ —É—Å–ø–µ—à–Ω–æ –ø–æ–ª—É—á–µ–Ω–∞!\n"
                f"–í–∞—à –∑–∞–∫–∞–∑ <b>‚Ññ{order_id}</b> –Ω–∞ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—é <b>{order['need_accounts']}</b> –∞–∫–∫–∞—É–Ω—Ç–∞(-–æ–≤) –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω –≤ —Ä–∞–±–æ—Ç—É.\n\n"
                f"üìã <b>–ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –ø–æ –∑–∞–∫–∞–∑—É:</b>\n\n"
                f"- –ê–∫–∫–∞—É–Ω—Ç—ã –≤—Å–µ—Ö –∑–∞–∫–∞–∑–æ–≤ —Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä—É—é—Ç—Å—è –≤ —Ä–∞–Ω–¥–æ–º–Ω–æ–º –ø–æ—Ä—è–¥–∫–µ.\n"
                f"- –ü–æ –º–µ—Ä–µ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏ –º—ã –±—É–¥–µ–º –æ—Ç–ø—Ä–∞–≤–ª—è—Ç—å –≤–∞–º —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –∏ –æ–Ω–∏ —Å—Ä–∞–∑—É —Å—Ç–∞–Ω—É—Ç –¥–æ—Å—Ç—É–ø–Ω—ã –¥–ª—è —Å–∫–∞—á–∏–≤–∞–Ω–∏—è –≤ —Å–ø–∏—Å–∫–µ –∑–∞–∫–∞–∑–æ–≤ –ø–æ –∫–æ–º–∞–Ω–¥–µ /start –≤ —Ñ–æ—Ä–º–∞—Ç–µ: seed:email_login:email_pass.\n",
                parse_mode="HTML",
            )

            # –ü—Ä–æ–≤–µ—Ä—è–µ–º –¥–æ—Å—Ç—É–ø–Ω—ã–µ –∞–∫–∫–∞—É–Ω—Ç—ã –≤ ready_accounts
            available_accounts = await db.ready_accounts.find(
                {"status": "available"}
            ).to_list(length=order["need_accounts"])
            registered_accounts = min(len(available_accounts), order["need_accounts"])

            # –ü—Ä–æ–≤–µ—Ä—è–µ–º —á—Ç–æ –Ω–µ—Ç—É –≥–æ—Ç–æ–≤—ã—Ö –∞–∫–∫–∞—É–Ω—Ç–æ–≤
            if registered_accounts == 0:
                # –ï—Å–ª–∏ –Ω–µ—Ç –¥–æ—Å—Ç—É–ø–Ω—ã—Ö –∞–∫–∫–∞—É–Ω—Ç–æ–≤, –¥–æ–±–∞–≤–ª—è–µ–º –≤—Å–µ –∞–∫–∫–∞—É–Ω—Ç—ã –∑–∞–∫–∞–∑–∞ –≤ PostgreSQL
                await insert_queue_goods(
                    order_id, order["user_id"], order["need_accounts"]
                )
                return

            for account in available_accounts[:registered_accounts]:
                new_goods = {
                    "create_date": datetime.now(pytz.utc),
                    "order_id": ObjectId(order_id),
                    "user_id": order["user_id"],
                    "seed": account["seed"],
                    "email_login": account["email_login"],
                    "email_pass": account["email_pass"],
                }
                result = await db.goods.insert_one(new_goods)
                new_goods_id = result.inserted_id

                # –û–±–Ω–æ–≤–ª—è–µ–º –∑–∞–∫–∞–∑
                await db.orders.update_one(
                    {"_id": ObjectId(order_id)},
                    {
                        "$inc": {"registration_accounts": 1},
                        "$push": {"goods": new_goods_id},
                    },
                )

                # –û–±–Ω–æ–≤–ª—è–µ–º —Å—Ç–∞—Ç—É—Å –∞–∫–∫–∞—É–Ω—Ç–∞ –≤ ready_accounts
                await db.ready_accounts.update_one(
                    {"_id": account["_id"]}, {"$set": {"status": "used"}}
                )

            # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –æ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω–Ω—ã—Ö –∞–∫–∫–∞—É–Ω—Ç–∞—Ö
            if registered_accounts > 0:
                if registered_accounts == order["need_accounts"]:
                    # C—Ç–∞–≤–∏–º —Å—Ç–∞—Ç—É—Å –∑–∞–∫–∞–∑–∞ Done –µ—Å–ª–∏ –≤—Å–µ –∞–∫–∏ –∑–∞—Ä–µ–≥–∞–Ω—ã
                    await db.orders.update_one(
                        {"_id": ObjectId(order_id)},
                        {"$set": {"status": "Done"}},
                    )

                    # –ï—Å–ª–∏ –≤—Å–µ –∞–∫–∫–∞—É–Ω—Ç—ã –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω—ã
                    completion_message = (
                        f"‚úÖ–ó–∞–∫–∞–∑ ‚Ññ{order_id} –ø–æ–ª–Ω–æ—Å—Ç—å—é –≤—ã–ø–æ–ª–Ω–µ–Ω!‚úÖ\n\n"
                        f"üîã–ó–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω–æ –≤—Å–µ {registered_accounts}/{order['need_accounts']} –∞–∫–∫–∞—É–Ω—Ç–æ–≤\n\n"
                        f"üîë –î–∞–Ω–Ω—ã–µ –∞–∫–∫–∞—É–Ω—Ç–∞:\n"
                        f"–ù–∞–∂–º–∏—Ç–µ –Ω–∞ –∫–æ–º–∞–Ω–¥—É —Å—Ç–∞—Ä—Ç –∏ –∫–ª–∏–∫–Ω–µ—Ç–µ –Ω–∞ –∫–Ω–æ–ø–∫—É –ø–æ–¥ —Å–æ–æ–±—â–µ–Ω–∏–µ–º —Å –Ω—É–∂–Ω—ã–º –∑–∞–∫–∞–∑–æ–º: /start"
                    )
                    await bot.send_message(
                        tg_user_id, completion_message, parse_mode="HTML"
                    )

                    order = await db.orders.find_one({"_id": ObjectId(order_id)})
                    goods_ids = order.get("goods", [])
                    goods_object_ids = [ObjectId(gid) for gid in goods_ids]
                    goods = await db.goods.find(
                        {"_id": {"$in": goods_object_ids}}
                    ).to_list(length=None)

                    goods_text = "\n".join(
                        [
                            f"{g['seed']}:{g['email_login']}:{g['email_pass']}"
                            for g in goods
                        ]
                    )

                    description_message = f"–ó–∞–∫–∞–∑: {str(order_id)}\n–§–æ—Ä–º–∞—Ç –≤—ã–¥–∞—á–∏: private_seed:email_login:email_pass\n"

                    # –û–±—ä–µ–¥–∏–Ω—è–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å—Å–∫–∏–π —Ç–µ–∫—Å—Ç –∏ —Ç–µ–∫—Å—Ç —Ç–æ–≤–∞—Ä–æ–≤
                    full_text = (
                        description_message + CUSTOM_MESSAGES_IN_FILE + goods_text
                    )

                    file = BufferedInputFile(
                        full_text.encode(),
                        filename=f"order_{str(order_id)[:8]}_warpcast_accounts.txt",
                    )
                    await bot.send_document(tg_user_id, file)
                else:
                    # –ï—Å–ª–∏ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω–∞ —Ç–æ–ª—å–∫–æ —á–∞—Å—Ç—å –∞–∫–∫–∞—É–Ω—Ç–æ–≤
                    remaining_accounts = order["need_accounts"] - registered_accounts
                    partial_completion_message = (
                        f"üéâ –ó–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–ª–∏ –≤–∞–º <b>{registered_accounts} –∞–∫–∫–∞—É–Ω—Ç–æ–≤</b> "
                        f"{registered_accounts}/{order['need_accounts']} üéâ\n"
                        f"‚ö†Ô∏è–û–∂–∏–¥–∞–π—Ç–µ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—é –æ—Å—Ç–∞–≤—à–∏—Ö—Å—è {remaining_accounts} –∞–∫–∫–∞—É–Ω—Ç–æ–≤.\n\n"
                        f"üìù –ó–∞–∫–∞–∑ ‚Ññ: {order_id}:\n\n"
                        f"üîë –î–∞–Ω–Ω—ã–µ –∞–∫–∫–∞—É–Ω—Ç–∞:\n"
                        f"–ù–∞–∂–º–∏—Ç–µ –Ω–∞ –∫–æ–º–∞–Ω–¥—É —Å—Ç–∞—Ä—Ç –∏ –∫–ª–∏–∫–Ω–µ—Ç–µ –Ω–∞ –∫–Ω–æ–ø–∫—É –ø–æ–¥ —Å–æ–æ–±—â–µ–Ω–∏–µ–º —Å –Ω—É–∂–Ω—ã–º –∑–∞–∫–∞–∑–æ–º: /start"
                    )
                    await bot.send_message(
                        tg_user_id,
                        partial_completion_message,
                        parse_mode="HTML",
                    )

                    # –î–æ–±–∞–≤–ª—è–µ–º –∑–∞–ø–∏—Å–∏ –≤ PostgreSQL —Ç–æ–ª—å–∫–æ –¥–ª—è –æ—Å—Ç–∞–≤—à–∏—Ö—Å—è –∞–∫–∫–∞—É–Ω—Ç–æ–≤
                    await insert_queue_goods(
                        order_id, order["user_id"], remaining_accounts
                    )

            return

        # –ñ–¥–µ–º 30 —Å–µ–∫—É–Ω–¥ –ø–µ—Ä–µ–¥ —Å–ª–µ–¥—É—é—â–µ–π –ø—Ä–æ–≤–µ—Ä–∫–æ–π
        await asyncio.sleep(30)

    # –í—Ä–µ–º—è –∏—Å—Ç–µ–∫–ª–æ, –æ–ø–ª–∞—Ç–∞ –Ω–µ –ø–æ–ª—É—á–µ–Ω–∞
    await db.orders.update_one(
        {"_id": ObjectId(order_id)}, {"$set": {"status": "Cancel"}}
    )
    await bot.send_message(
        tg_user_id,
        f"‚ùå <b>–í –æ—Ç–≤–µ–¥–µ–Ω–Ω–æ–µ –≤—Ä–µ–º—è –æ–ø–ª–∞—Ç–∞ —Ç–∞–∫ –∏ –Ω–µ –ø–æ—Å—Ç—É–ø–∏–ª–∞, –ø–æ—ç—Ç–æ–º—É –∑–∞–∫–∞–∑ ‚Ññ{order_id} –æ—Ç–º–µ–Ω–µ–Ω.</b>",
        parse_mode="HTML",
    )


def generate_price_image(
    price_gradations: List[Tuple[float, float]],
    filename: str = "price_list.png",
) -> str:
    global CURRENT_PRICE_HASH
    new_price_hash = hashlib.md5(str(price_gradations).encode()).hexdigest()

    if CURRENT_PRICE_HASH == new_price_hash:
        return filename

    width, height = 600, 400
    image = Image.new("RGB", (width, height), "#1b1b1b")
    draw = ImageDraw.Draw(image)

    title_font = ImageFont.truetype("nofire.ttf", 28)
    price_font = ImageFont.truetype("nofire.ttf", 24)

    # –†–∞—Å—Å—á–∏—Ç—ã–≤–∞–µ–º –æ–±—â—É—é –≤—ã—Å–æ—Ç—É –≤—Å–µ–≥–æ —Ç–µ–∫—Å—Ç–∞
    title = "ACCOUNTS PRICE"
    title_bbox = title_font.getbbox(title)
    title_height = title_bbox[3] - title_bbox[1]

    price_texts = []
    total_text_height = title_height
    for i, (min_qty, price) in enumerate(price_gradations[:-1]):
        if i == len(price_gradations) - 2 or price_gradations[i + 1][0] == float("inf"):
            range_str = f"{min_qty}+"
        else:
            next_min_qty = price_gradations[i + 1][0]
            range_str = f"{min_qty}-{next_min_qty-1}"
        text = f"{range_str} accounts: ${price:.2f} per account"
        price_texts.append(text)
        text_bbox = price_font.getbbox(text)
        total_text_height += (
            text_bbox[3] - text_bbox[1] + 10
        )  # 10 –ø–∏–∫—Å–µ–ª–µ–π –æ—Ç—Å—Ç—É–ø–∞ –º–µ–∂–¥—É —Å—Ç—Ä–æ–∫–∞–º–∏

    # –†–∞—Å—Å—á–∏—Ç—ã–≤–∞–µ–º –Ω–∞—á–∞–ª—å–Ω—É—é Y-–ø–æ–∑–∏—Ü–∏—é –¥–ª—è –≤–µ—Ä—Ç–∏–∫–∞–ª—å–Ω–æ–≥–æ —Ü–µ–Ω—Ç—Ä–∏—Ä–æ–≤–∞–Ω–∏—è
    start_y = (height - total_text_height) // 2

    # –†–∏—Å—É–µ–º –∑–∞–≥–æ–ª–æ–≤–æ–∫
    title_bbox = title_font.getbbox(title)
    title_width = title_bbox[2] - title_bbox[0]
    title_position = ((width - title_width) // 2, start_y)
    draw.text(title_position, title, font=title_font, fill="white")

    # –†–∏—Å—É–µ–º —Ü–µ–Ω—ã
    y = start_y + title_height + 20  # 20 –ø–∏–∫—Å–µ–ª–µ–π –æ—Ç—Å—Ç—É–ø–∞ –ø–æ—Å–ª–µ –∑–∞–≥–æ–ª–æ–≤–∫–∞
    for text in price_texts:
        text_bbox = price_font.getbbox(text)
        text_width = text_bbox[2] - text_bbox[0]
        text_position = ((width - text_width) // 2, y)
        draw.text(text_position, text, font=price_font, fill="white")
        y += text_bbox[3] - text_bbox[1] + 10  # 10 –ø–∏–∫—Å–µ–ª–µ–π –æ—Ç—Å—Ç—É–ø–∞ –º–µ–∂–¥—É —Å—Ç—Ä–æ–∫–∞–º–∏

    image.save(filename)

    CURRENT_PRICE_HASH = new_price_hash

    return filename


def generate_price_text(price_gradations: List[Tuple[float, float]]) -> str:
    price_ranges = []
    for i, (min_qty, price) in enumerate(
        price_gradations[:-1]
    ):  # –ò—Å–∫–ª—é—á–∞–µ–º –ø–æ—Å–ª–µ–¥–Ω–∏–π —ç–ª–µ–º–µ–Ω—Ç
        if i == len(price_gradations) - 2 or price_gradations[i + 1][0] == float("inf"):
            range_str = f"{min_qty}+"
        else:
            next_min_qty = price_gradations[i + 1][0]
            range_str = f"{min_qty}-{next_min_qty-1}"

        price_ranges.append(f"<b>{range_str} –∞–∫–∫–∞—É–Ω—Ç–æ–≤:</b> ${price:.2f} –∑–∞ –∞–∫–∫–∞—É–Ω—Ç")

    price_text = "<b>üí≤ –¶–µ–Ω—ã –Ω–∞ –∞–∫–∫–∞—É–Ω—Ç—ã –≤ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –æ—Ç –∫–æ–ª–∏—á–µ—Å—Ç–≤–∞:</b>\n\n"
    price_text += "\n".join(price_ranges)
    price_text += "\n\n<b>üì• –í–≤–µ–¥–∏—Ç–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –∞–∫–∫–∞—É–Ω—Ç–æ–≤ (–æ—Ç 1 –¥–æ 200):</b>"

    return price_text


def calculate_price(quantity):
    for min_qty, price_per_account in reversed(price_gradations):
        if quantity >= min_qty:
            total_price = round(quantity * price_per_account, 2)
            return price_per_account, total_price
    return None, None


@dp.message(Command("new_order"))
async def cmd_new_order(message: types.Message, state: FSMContext):
    # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –ø—Ä–æ–º–µ–∂—É—Ç–æ—á–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ
    processing_msg = await message.answer("–§–æ—Ä–º–∏—Ä—É–µ–º –ø—Ä–∞–π—Å...")

    # price_text = generate_price_text(price_gradations)
    text = "- –î–ª—è —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏ –∏—Å–ø–æ–ª—å–∑—É—é—Ç—Å—è —Ç—Ä–∞—Å—Ç–æ–≤—ã–µ <b>–µ–≤—Ä–æ–ø–µ–π—Å–∫–∏–µ IP-–∞–¥—Ä–µ—Å–∞</b>\n- –ê–∫–∫–∞—É–Ω—Ç—ã –æ–ø–ª–∞—á–∏–≤–∞—é—Ç—Å—è —Ç–æ–ª—å–∫–æ <b>–±–∞–Ω–∫–æ–≤—Å–∫–æ–π –∫–∞—Ä—Ç–æ–π</b> (–Ω–µ –≤–∞—Ä–ø—ã!)\n- –£ –∞–∫–∫–∞—É–Ω—Ç–æ–≤ –∑–∞–ø–æ–ª–Ω–µ–Ω—ã —É–Ω–∏–∫–∞–ª—å–Ω–∞—è <b>–∞–≤–∞—Ç–∞—Ä–∫–∞, —Ç–µ–≥ –∏ –Ω–∏–∫</b>\n\n\nüì• <b>–í–≤–µ–¥–∏—Ç–µ –∂–µ–ª–∞–µ–º–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –∞–∫–∫–∞—É–Ω—Ç–æ–≤ –¥–ª—è —Ä–∞—Å—á–µ—Ç–∞ —Å—Ç–æ–∏–º–æ—Å—Ç–∏:</b>"
    image_path = generate_price_image(price_gradations)

    # –£–¥–∞–ª—è–µ–º –ø—Ä–æ–º–µ–∂—É—Ç–æ—á–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ
    await processing_msg.delete()

    await message.answer_photo(
        photo=types.FSInputFile(image_path), caption=text, parse_mode="HTML"
    )
    # await message.answer(price_text, parse_mode="HTML")
    await state.set_state(OrderStates.waiting_for_quantity)


@dp.message(OrderStates.waiting_for_quantity)
async def process_quantity(message: types.Message, state: FSMContext):
    try:
        quantity = int(message.text)
        if quantity < 1 or quantity > 200:
            if quantity > 200:
                await message.answer(
                    "–¢–∞–∫–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –º–æ–∂–Ω–æ –∑–∞–∫–∞–∑–∞—Ç—å —Ç–æ–ª—å–∫–æ –ø–æ –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–æ–º—É —Å–æ–≥–ª–∞—Å–æ–≤–∞–Ω–∏—é, —Å–µ–π—á–∞—Å –º–æ–∂–Ω–æ –æ—Ñ–æ—Ä–º–∏—Ç—å –∑–∞–∫–∞–∑ –æ—Ç 1 –¥–æ 200 –∞–∫–∫–∞—É–Ω—Ç–æ–≤."
                )
            else:
                await message.answer(
                    "–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ –∫–æ–ª–ª–∏—á–µ—Å—Ç–≤–æ –∞–∫–∫–∞—É–Ω—Ç–æ–≤ –æ—Ç 1 –¥–æ 200."
                )
            return
    except ValueError:
        await message.answer(
            "–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ —Ü–µ–ª–æ–µ —á–∏—Å–ª–æ –±–µ–∑ –ø—Ä–æ–±–µ–ª–æ–≤ –∏ —Å–ø–µ—Ü–∏–∞–ª—å–Ω—ã—Ö —Å–∏–º–≤–æ–ª–æ–≤."
        )
        return

    price_per_account, total_price = calculate_price(quantity)

    await state.update_data(
        quantity=quantity,
        price_per_account=price_per_account,
        total_price=total_price,
    )

    keyboard = InlineKeyboardMarkup(
        inline_keyboard=[
            [
                InlineKeyboardButton(
                    text="–Ø —Å–æ–≥–ª–∞—Å–µ–Ω —Å —É—Å–ª–æ–≤–∏—è–º–∏, –æ—Ñ–æ—Ä–º–ª—è—é –∑–∞–∫–∞–∑",
                    callback_data="confirm_order",
                )
            ],
            [
                InlineKeyboardButton(
                    text="–û—Ç–º–µ–Ω–∏—Ç—å/–ò–∑–º–µ–Ω–∏—Ç—å –∑–∞–∫–∞–∑", callback_data="cancel_order"
                )
            ],
        ]
    )

    await message.answer(
        f"üìã –î–ª—è —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏ <u>{quantity} –∞–∫–∫–∞—É–Ω—Ç–∞(-–æ–≤)</u> –æ–±—â–∞—è —Å—É–º–º–∞ –∑–∞–∫–∞–∑–∞ —Å–æ—Å—Ç–∞–≤–∏—Ç <b>{total_price} USDC</b> (–ø–æ $<code>{price_per_account}</code> –∑–∞ –∞–∫–∫–∞—É–Ω—Ç)",
        reply_markup=keyboard,
        parse_mode="HTML",
    )
    await state.set_state(OrderStates.waiting_for_confirmation)


@dp.callback_query(OrderStates.waiting_for_confirmation)
async def process_callback(callback_query: types.CallbackQuery, state: FSMContext):
    if callback_query.data == "cancel_order":
        await state.clear()
        await cmd_new_order(callback_query.message, state)
    elif callback_query.data == "confirm_order":
        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –ø—Ä–æ–º–µ–∂—É—Ç–æ—á–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ
        processing_msg = await callback_query.message.answer("–°–æ–∑–¥–∞–µ–º –∑–∞–∫–∞–∑...")

        # –ì–µ–Ω–µ—Ä–∞—Ü–∏—è –∞–¥—Ä–µ—Å–∞ –∏ –ø—Ä–∏–≤–∞—Ç–Ω–æ–≥–æ –∫–ª—é—á–∞
        w3 = Web3()
        account = w3.eth.account.create()
        pay_address = account.address
        pay_address_pk = account.key.hex()

        # –ü–æ–ª—É—á–µ–Ω–∏–µ –¥–∞–Ω–Ω—ã—Ö –∏–∑ —Å–æ—Å—Ç–æ—è–Ω–∏—è
        data = await state.get_data()
        quantity = data["quantity"]
        price_per_account = data["price_per_account"]
        total_price = data["total_price"]

        # –°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –≤ –±—ç–∫–∞–ø
        backup_data = {
            "address": pay_address,
            "private_key": pay_address_pk,
            "quantity": quantity,
            "price_per_account": price_per_account,
            "total_price": total_price,
            "timestamp": datetime.now().isoformat(),
        }

        backup_dir = "./backup"
        os.makedirs(backup_dir, exist_ok=True)
        backup_file = os.path.join(
            backup_dir,
            f"wallet_backup_{datetime.now().strftime('%Y%m%d_%H%M%S')}.json",
        )

        with open(backup_file, "w") as f:
            json.dump(backup_data, f, indent=4)

        # –°–æ–∑–¥–∞–Ω–∏–µ –∑–∞–∫–∞–∑–∞ –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö
        user = await get_or_create_user(
            callback_query.from_user.id, callback_query.from_user.username
        )
        new_order = {
            "user_id": user["_id"],
            "tg_user_id": user["tg_user_id"],
            "create_date": datetime.utcnow(),
            "need_accounts": quantity,
            "registration_accounts": 0,
            "status": "New",
            "price_per_account": price_per_account,
            "price_sum": total_price,
            "pay_address": pay_address,
            "pay_address_pk": pay_address_pk,
            "goods": [],
        }
        result = await db.orders.insert_one(new_order)
        order_id = result.inserted_id

        # –†–∞—Å—á–µ—Ç –≤—Ä–µ–º–µ–Ω–∏ –æ–∫–æ–Ω—á–∞–Ω–∏—è –æ–∂–∏–¥–∞–Ω–∏—è –æ–ø–ª–∞—Ç—ã
        moscow_tz = pytz.timezone("Europe/Moscow")
        end_time = datetime.now(moscow_tz) + timedelta(minutes=15)
        formatted_end_time = end_time.strftime("%Y-%m-%d %H:%M:%S")

        # –£–¥–∞–ª—è–µ–º –ø—Ä–æ–º–µ–∂—É—Ç–æ—á–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ
        await processing_msg.delete()

        await callback_query.message.answer(
            f"""üì¶ –ó–∞–∫–∞–∑ <b>‚Ññ{order_id}</b> –Ω–∞ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—é <b>{quantity}</b> –∞–∫–∫–∞—É–Ω—Ç–∞(-–æ–≤) —Å–æ–∑–¥–∞–Ω!\n\nüíº –û–∂–∏–¥–∞–µ–º –æ–ø–ª–∞—Ç—É:\n\nüîµ –°–µ—Ç—å: BASE\nüí∞ –°—É–º–º–∞: <code>{total_price}</code> <b>USDC</b> (–û–ø–ª–∞—Ç–∞ –≤ USDC, –∞ –Ω–µ ETH‚ùó)\nüè¶ –ê–¥—Ä–µ—Å –¥–ª—è –ø–µ—Ä–µ–≤–æ–¥–∞: <code>{pay_address}</code>\n\n‚è≥ –û–ø–ª–∞—Ç—É –±—É–¥–µ–º –æ–∂–∏–¥–∞—Ç—å –≤ —Ç–µ—á–µ–Ω–∏–µ <b>15 –º–∏–Ω—É—Ç –¥–æ {formatted_end_time}</b>. –ü–æ—Å–ª–µ –ø–æ—Å—Ç—É–ø–ª–µ–Ω–∏—è –¥–µ–Ω–µ–≥ –≤—ã –ø–æ–ª—É—á–∏—Ç–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –æ–± —É—Å–ø–µ—à–Ω–æ–π –æ–ø–ª–∞—Ç–µ. –ü–æ –ø—Ä–æ—à–µ—Å—Ç–≤–∏–∏ —ç—Ç–æ–≥–æ –≤—Ä–µ–º–µ–Ω–∏ –∑–∞–∫–∞–∑ –±—É–¥–µ—Ç –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ –æ—Ç–º–µ–Ω–µ–Ω.\n\nüîî –í–∞–∂–Ω–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è:\n\n–£–±–µ–¥–∏—Ç–µ—Å—å, —á—Ç–æ –≤—ã –ø–µ—Ä–µ–≤–æ–¥–∏—Ç–µ —Å—Ä–µ–¥—Å—Ç–≤–∞ –Ω–∞ –ø—Ä–∞–≤–∏–ª—å–Ω—ã–π –∞–¥—Ä–µ—Å.\n–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–µ—Ä–µ–≤–æ–¥–∏—Ç–µ –Ω–µ –º–µ–Ω—å—à–µ —É–∫–∞–∑–∞–Ω–Ω–æ–π —Å—É–º–º—ã - –±–æ–ª—å—à–µ –º–æ–∂–Ω–æ, –º–µ–Ω—å—à–µ –Ω–µ—Ç.\n\n–°–ø–∞—Å–∏–±–æ –∑–∞ –ø–æ–Ω–∏–º–∞–Ω–∏–µ! üí¨""",
            parse_mode="HTML",
        )
        await state.clear()

        # –ó–∞–ø—É—Å–∫ –∑–∞–¥–∞—á–∏ –æ–∂–∏–¥–∞–Ω–∏—è –æ–ø–ª–∞—Ç—ã
        asyncio.create_task(
            wait_for_payment(
                order_id, callback_query.from_user.id, total_price, end_time
            )
        )


@dp.message(OrderStates.waiting_for_confirmation)
async def invalid_confirmation_input(message: types.Message):
    await message.delete()


async def on_startup(bot: Bot) -> None:
    responce = await bot.set_webhook(
        f"{DOMAIN}{WEBHOOK_PATH}", secret_token=WEBHOOK_SECRET
    )
    logger.info(responce)
    logger.info(
        f"Telegram servers now send updates to {DOMAIN}{WEBHOOK_PATH}. Bot is online"
    )


def main_webhook() -> None:
    # Register startup hook to initialize webhook
    # dp.startup.register(on_startup)

    # Create aiohttp.web.Application instance
    app = web.Application()

    # Create an instance of request handler,
    # aiogram has few implementations for different cases of usage
    # In this example we use SimpleRequestHandler which is designed to handle simple cases
    webhook_requests_handler = SimpleRequestHandler(
        dispatcher=dp,
        bot=bot,
        secret_token=WEBHOOK_SECRET,
    )
    # Register webhook handler on application
    webhook_requests_handler.register(app, path=WEBHOOK_PATH)

    # Mount dispatcher startup and shutdown hooks to aiohttp application
    setup_application(app, dp, bot=bot)

    # And finally start webserver
    web.run_app(app, host=WEB_SERVER_HOST, port=WEB_SERVER_PORT)


async def main_polling():
    await bot.delete_webhook()
    logger.info("–ë–æ—Ç –∑–∞–ø—É—â–µ–Ω —á–µ—Ä–µ–∑ –ø–æ–ª–∏–Ω–≥")
    await dp.start_polling(bot)


if __name__ == "__main__":
    logger.info(f"–í—ã–±—Ä–∞–Ω —Ä–µ–∂–∏–º: {WEBHOOK}")
    if WEBHOOK == "1":
        main_webhook()
    else:
        asyncio.run(main_polling())
